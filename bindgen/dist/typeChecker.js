"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeChecker = void 0;
const visitor_as_1 = require("visitor-as");
const toIgnore = [
    "builtin",
    ".spec",
    "dataview",
    "date",
    "math",
    "number",
    "string",
    "typedarray",
    "bindings/Date",
    "bindings/Math",
];
class TypeChecker extends visitor_as_1.BaseVisitor {
    check(node) {
        let first = node.text.substring(0, node.text.indexOf("\n"));
        if (!(first.includes("ignore") ||
            toIgnore.some((n) => node.normalizedPath.includes(n)))) {
            this.visit(node);
        }
    }
    static check(node) {
        const typeChecker = new TypeChecker();
        for (let i = 0; i < node.sources.length; i++) {
            typeChecker.check(node.sources[i]);
        }
    }
    visitTypeName(node) {
        const regex = /f32|f64/;
        if (regex.test(node.identifier.text)) {
            let range = node.range;
            let source = range.source;
            let line = source.lineAt(range.start);
            let lineStr = source.text.split("\n")[line - 1];
            TypeChecker.floatsFound.push("\n" +
                " ".repeat(4) +
                lineStr +
                "\n" +
                "in " +
                source.normalizedPath +
                "(" +
                line.toString() +
                "," +
                source.columnAt().toString() +
                ")");
        }
    }
    static checkBinary(node) {
        const wat = node.toText();
        const regex = /f32|f64/;
        if (regex.test(wat)) {
            throw new Error("Floating point numbers are not allowed in smart contracts: Check\n" +
                TypeChecker.floatsFound.join("\n"));
        }
    }
}
exports.TypeChecker = TypeChecker;
TypeChecker.floatsFound = [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZUNoZWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZUNoZWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkNBQXlDO0FBTXpDLE1BQU0sUUFBUSxHQUFHO0lBQ2YsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFlBQVk7SUFDWixlQUFlO0lBQ2YsZUFBZTtDQUNoQixDQUFDO0FBRUYsTUFBYSxXQUFZLFNBQVEsd0JBQVc7SUFHMUMsS0FBSyxDQUFDLElBQVk7UUFDaEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDNUQsSUFDRSxDQUFDLENBQ0MsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDeEIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDdEQsRUFDRDtZQUNBLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFZO1FBQ3ZCLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2pELFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFjO1FBQzFCLE1BQU0sS0FBSyxHQUFtQixTQUFTLENBQUM7UUFDeEMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUN2QixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQzFCLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztZQUVoRCxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDMUIsSUFBSTtnQkFDRixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDYixPQUFPO2dCQUNQLElBQUk7Z0JBQ0osS0FBSztnQkFDTCxNQUFNLENBQUMsY0FBYztnQkFDckIsR0FBRztnQkFDSCxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLEdBQUc7Z0JBQ0gsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRTtnQkFDNUIsR0FBRyxDQUNOLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQVk7UUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFCLE1BQU0sS0FBSyxHQUFtQixTQUFTLENBQUM7UUFDeEMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQ2Isb0VBQW9FO2dCQUNsRSxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDckMsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7QUF2REgsa0NBd0RDO0FBdkRRLHVCQUFXLEdBQWEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZU5hbWUsIE1vZHVsZSwgU291cmNlLCBQYXJzZXIgfSBmcm9tIFwidmlzaXRvci1hcy9hc1wiO1xyXG5pbXBvcnQgeyBCYXNlVmlzaXRvciB9IGZyb20gXCJ2aXNpdG9yLWFzXCI7XHJcblxyXG5kZWNsYXJlIGludGVyZmFjZSBSZWdFeHAge1xyXG4gIHRlc3Qoczogc3RyaW5nKTogYm9vbDtcclxufVxyXG5cclxuY29uc3QgdG9JZ25vcmUgPSBbXHJcbiAgXCJidWlsdGluXCIsXHJcbiAgXCIuc3BlY1wiLFxyXG4gIFwiZGF0YXZpZXdcIixcclxuICBcImRhdGVcIixcclxuICBcIm1hdGhcIixcclxuICBcIm51bWJlclwiLFxyXG4gIFwic3RyaW5nXCIsXHJcbiAgXCJ0eXBlZGFycmF5XCIsXHJcbiAgXCJiaW5kaW5ncy9EYXRlXCIsXHJcbiAgXCJiaW5kaW5ncy9NYXRoXCIsXHJcbl07XHJcblxyXG5leHBvcnQgY2xhc3MgVHlwZUNoZWNrZXIgZXh0ZW5kcyBCYXNlVmlzaXRvciB7XHJcbiAgc3RhdGljIGZsb2F0c0ZvdW5kOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBjaGVjayhub2RlOiBTb3VyY2UpOiB2b2lkIHtcclxuICAgIGxldCBmaXJzdCA9IG5vZGUudGV4dC5zdWJzdHJpbmcoMCwgbm9kZS50ZXh0LmluZGV4T2YoXCJcXG5cIikpO1xyXG4gICAgaWYgKFxyXG4gICAgICAhKFxyXG4gICAgICAgIGZpcnN0LmluY2x1ZGVzKFwiaWdub3JlXCIpIHx8XHJcbiAgICAgICAgdG9JZ25vcmUuc29tZSgobikgPT4gbm9kZS5ub3JtYWxpemVkUGF0aC5pbmNsdWRlcyhuKSlcclxuICAgICAgKVxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMudmlzaXQobm9kZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2hlY2sobm9kZTogUGFyc2VyKTogdm9pZCB7XHJcbiAgICBjb25zdCB0eXBlQ2hlY2tlciA9IG5ldyBUeXBlQ2hlY2tlcigpO1xyXG4gICAgZm9yIChsZXQgaTogaTMyID0gMDsgaSA8IG5vZGUuc291cmNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB0eXBlQ2hlY2tlci5jaGVjayhub2RlLnNvdXJjZXNbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmlzaXRUeXBlTmFtZShub2RlOiBUeXBlTmFtZSk6IHZvaWQge1xyXG4gICAgY29uc3QgcmVnZXg6IFJlZ0V4cCA9IDxSZWdFeHA+L2YzMnxmNjQvO1xyXG4gICAgaWYgKHJlZ2V4LnRlc3Qobm9kZS5pZGVudGlmaWVyLnRleHQpKSB7XHJcbiAgICAgIGxldCByYW5nZSA9IG5vZGUucmFuZ2U7XHJcbiAgICAgIGxldCBzb3VyY2UgPSByYW5nZS5zb3VyY2U7XHJcbiAgICAgIGxldCBsaW5lID0gc291cmNlLmxpbmVBdChyYW5nZS5zdGFydCk7XHJcbiAgICAgIGxldCBsaW5lU3RyID0gc291cmNlLnRleHQuc3BsaXQoXCJcXG5cIilbbGluZSAtIDFdO1xyXG5cclxuICAgICAgVHlwZUNoZWNrZXIuZmxvYXRzRm91bmQucHVzaChcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICAgIFwiIFwiLnJlcGVhdCg0KSArXHJcbiAgICAgICAgICBsaW5lU3RyICtcclxuICAgICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgICAgXCJpbiBcIiArXHJcbiAgICAgICAgICBzb3VyY2Uubm9ybWFsaXplZFBhdGggK1xyXG4gICAgICAgICAgXCIoXCIgK1xyXG4gICAgICAgICAgbGluZS50b1N0cmluZygpICtcclxuICAgICAgICAgIFwiLFwiICtcclxuICAgICAgICAgIHNvdXJjZS5jb2x1bW5BdCgpLnRvU3RyaW5nKCkgK1xyXG4gICAgICAgICAgXCIpXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjaGVja0JpbmFyeShub2RlOiBNb2R1bGUpIHtcclxuICAgIGNvbnN0IHdhdCA9IG5vZGUudG9UZXh0KCk7XHJcbiAgICBjb25zdCByZWdleDogUmVnRXhwID0gPFJlZ0V4cD4vZjMyfGY2NC87XHJcbiAgICBpZiAocmVnZXgudGVzdCh3YXQpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICBcIkZsb2F0aW5nIHBvaW50IG51bWJlcnMgYXJlIG5vdCBhbGxvd2VkIGluIHNtYXJ0IGNvbnRyYWN0czogQ2hlY2tcXG5cIiArXHJcbiAgICAgICAgICBUeXBlQ2hlY2tlci5mbG9hdHNGb3VuZC5qb2luKFwiXFxuXCIpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==